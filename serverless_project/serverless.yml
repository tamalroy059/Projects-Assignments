service: aws-python

plugins:
  - serverless-sqs-alarms-plugin
  - serverless-python-requirements

provider:
  name: aws
  runtime: python2.7
  stage: dev
  region: us-east-1
  memorySize: 128
  environment:
    DYNAMODB_TABLE: amazon-api-result
    GOODREADS_TABLE: goodreads-api-result
    AMAZON_TITLE_SCRAPE_TABLE: amazon-title-scrape-result
    AMAZON_REVIEW_SCRAPE_TABLE: amazon-review-scrape-result
    AMAZON_DAILY_TITLE_SCRAPE_TABLE: amazon-daily-title-scrape-result
    AMAZON_DAILY_TITLE_LIST_TABLE: amazon-daily-title-list
  iamRoleStatements:
  - Effect: Allow
    Action:
      - s3:*
    Resource: "*"

  - Effect: Allow
    Action:
      - lambda:InvokeFunction
    Resource: arn:aws:lambda:*:*:function:${self:custom.process}
  - Effect: Allow
    Action:
      - lambda:InvokeFunction
    Resource: arn:aws:lambda:*:*:function:${self:custom.scrape}
  - Effect: Allow
    Action:
      - sqs:DeleteMessage
      - sqs:ReceiveMessage
    Resource: arn:aws:sqs:*:*:${self:custom.sqs}
  - Effect: Allow
    Action:
      - sqs:DeleteMessage
      - sqs:ReceiveMessage
    Resource: arn:aws:sqs:*:*:${self:custom.sqsattribute}

  - Effect: Allow
    Action:
      - sqs:DeleteMessage
      - sqs:ReceiveMessage
    Resource: arn:aws:sqs:*:*:${self:custom.iplist}

  - Effect: Allow
    Action:
      - sqs:DeleteMessage
      - sqs:ReceiveMessage
    Resource: arn:aws:sqs:*:*:${self:custom.sqsreview}
  - Effect: Allow
    Action:
      - sqs:DeleteMessage
      - sqs:ReceiveMessage
    Resource: arn:aws:sqs:*:*:${self:custom.sqsdaily}
  - Effect: "Allow"
    Resource: "*"
    Action:
      - "sns:*"


custom:
  bucket: slstests4
  region: ${self:provider.region}
  stage: ${opt:stage, self:provider.stage}
  prefix: ${self:custom.stage}-${self:service}
  process: ${self:custom.prefix}-process
  scrape: ${self:custom.prefix}-scrape
  daily_queue: ${self:custom.prefix}-daily-queue
  config: ${self:custom.prefix}-config
  sns: ${self:custom.prefix}-trigger
  sqs: ${self:custom.prefix}-amazon-api
  sqsattribute: ${self:custom.prefix}-amazon-scrape
  iplist: ${self:custom.prefix}-already-scraped
  sqsreview: ${self:custom.prefix}-review-scrape
  sqsdaily: ${self:custom.prefix}-daily-scrape

  pythonRequirements:
    dockerizePip: non-linux
  sqs-alarms:
    - queue: ${self:custom.sqs}
      topic: ${self:custom.sns}
      thresholds:
        - 1
        - 50
        - 100
        - 500
        - 1000
        - 5000


package:
  exclude:
    - docs/**
    - helpers/**
    - node_modules/**
    - test/**

functions:
  queue:
    timeout: 120
    handler: functions/queue.Queue_handler
    name: ${self:custom.prefix}-queue
    runtime: python2.7
    events:
      - s3:
          bucket: ${self:custom.bucket}
          event: s3:ObjectCreated:*
    environment:
      region: ${self:custom.region}
      sqs: ${self:custom.sqs}
      sqsattribute: ${self:custom.sqsattribute}
      sns: ${self:custom.sns}

  daily_queue:
    timeout: 120
    handler: functions/daily_queue.Queue_handler
    name: ${self:custom.prefix}-daily-queue
    runtime: python2.7
    events:
      # - schedule: rate(1 minute)
      - schedule: cron(1 4 * * ? *)
    environment:
      region: ${self:custom.region}
      sqs: ${self:custom.sqs}
      sqsattribute: ${self:custom.sqsattribute}
      sqsreview: ${self:custom.sqsreview}
      sqsdaily: ${self:custom.sqsdaily}


  sns_trigger:
    handler: functions/sns_trigger.hello
    runtime: nodejs6.10
    events:
      - sns: ${self:custom.sns}
      - schedule: rate(1 minute)
    environment:
      region: ${self:custom.region}
      sqs: ${self:custom.sqs}
      process: ${self:custom.process}
      scrape: ${self:custom.scrape}

  process:
    timeout: 60
    runtime: python2.7
    handler: functions/process.hello
    name: ${self:custom.prefix}-process
    environment:
      region: ${self:custom.region}
      sqs: ${self:custom.sqs}
      sqsattribute: ${self:custom.sqsattribute}
      sqsreview: ${self:custom.sqsreview}
      sqsdaily: ${self:custom.sqsdaily}
      daily_queue: ${self:custom.daily_queue}


  # scrape:
  #   timeout: 60
  #   runtime: python2.7
  #   handler: functions/scrape.scrape_amazon
  #   name: ${self:custom.prefix}-scrape
  #   environment:
  #     region: ${self:custom.region}
  #     sqs: ${self:custom.sqs}
  #     sqsattribute: ${self:custom.sqsattribute}



resources:
  Resources:

    Messages:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.sqs}
        MessageRetentionPeriod: 1209600

    AmazonAttribute:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.sqsattribute}
        MessageRetentionPeriod: 1209600

    AmazonReviewAttribute:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.sqsreview}
        MessageRetentionPeriod: 1209600

    AmazonDailyScrapeAttribute:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.sqsdaily}
        MessageRetentionPeriod: 1209600

    iplist:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.iplist}
        MessageRetentionPeriod: 1209600

    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}


    TodosGoodreadsTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.GOODREADS_TABLE}

    TodosAmazonTitleScrapeTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        TableName: ${self:provider.environment.AMAZON_TITLE_SCRAPE_TABLE}

    TodosAmazonReviewScrapeTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        TableName: ${self:provider.environment.AMAZON_REVIEW_SCRAPE_TABLE}

    TodosAmazonDailyTitleScrapeTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        TableName: ${self:provider.environment.AMAZON_DAILY_TITLE_SCRAPE_TABLE}

    TodosAmazonDailyTitleListTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        TableName: ${self:provider.environment.AMAZON_DAILY_TITLE_LIST_TABLE}

        # VisibilityTimeout: 60
    #     RedrivePolicy:
    #       deadLetterTargetArn:
    #         Fn::GetAtt:
    #         - MessagesDeadLetterQueue
    #         - Arn
    #       maxReceiveCount: 10
    #
    # MessagesDeadLetterQueue:
    #   Type: AWS::SQS::Queue
    #   Properties:
    #     QueueName: ${self:custom.sqs}-dead-letter-queue
    #     MessageRetentionPeriod: 1209600
