sapply(flag_colors,mean\)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat[1][1]
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(c(3,4,5,5,5,6,6),unique)
unique_vals<-lapply(flags,unique)
unique_vals
unique_vals
unique_vals<-lapply(flags,length)
sapply(unique_vals,length)
sapply(flags,length)
sapply(flags,unique)
unique_vals[2]
lapply(unique_vals,function(elem)elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class, character(1))
?tappy
??tappy
?tapply
landmass
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,ssummary)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants)
tail(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10,replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
prob <- c(.3,.7)
sample(c(0,1),100,replace=TRUE,prob = c(.3,.7))
flips<-sample(c(0,1),100,replace=TRUE,prob = c(.3,.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=.7)
flig2<-rbinom(c(0,1),size=100,prob=.7)
flig2<-rbinom(n=100,size=1,prob=.7)
skip()
flips2<-rbinom(100,size=1,prob=.7)
flips2
sum(flips2)
rnorm(100,size=1,prob=.7)
rnorm(size=1,prob=.7)
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
?rpois
rpois(5)
rpois(5,10)
my_pois<-replicate(100,rpois(5,10))
my_pois
colMeans(my_pois)
cm<-colMeans(my_pois)
hist(cm)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS
)
sample(1,100,replace=TRUE,c(.3,.7))
sample(c(0,1),100,replace = TRUE,c(.3,.7))
flips<-sample(c(0,1),100,replace = TRUE,c(.3,.7))
flips
sum(flips)
swirl()
swirl()
d1<-Sys.Date()
class(d1)
unclass(d1)
print(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
d1
weekdays(d1)
months(d1)
months(t1)
quarters(t1)
quarters(t2)
t3
t3 <- "October 17, 1986 8:24"
t3 <- "October 17, 1986 08:24"
strptime(t3)
strptime(t3,"%B %d, %Y %H:%M")
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime
difftime(Sys.time(),t1,units='days')
data(cars)
?cars
head()
head(cars)
plot(cars)
?plot
ccars
cars
plot(cars$speed, y=cars$dist)
plot(cars$dist,cars$speed)
skip()
plot(x=cars$speed, y=cars$dist, xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist,ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed",ylab="Stopping Distance")
skip()
skip()
plot(cars,2)
plot(cars,col=2)
plot(cars,xlim=c(10,15))
plot(cars,pch=2)
skip()
boxplot(mtcars)
?boxplot
skip()
hist(mtcars$mpg)
skip()
exit()
bye()
install.packages("RMySQL")
install.packages("RMySQL",type = "source")
library(RMySQL)
library(DBI)
library(RMySQL)
ucscDb<-dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;");dbConnect(ucscDb);
View(result)
View(result)
hg19<- dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19,"select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19,"affyU133Plus2")
head(affyData)
View(affyData)
View(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affMis <- fetch(query); quantile(affMis$misMatches)
affMis
affyMisSmall <-fetch(query,n=10); dbClearResult(query);
dim(affyMisSmall)
dbDisconnect(hg19)
library(RMySQL)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created <- h5createFile("example.h5")
created
created <- h5createGroup("example.h5","foo")
created <- h5createGroup("example.h5","baa")
created <- h5createGroup("example.h5","foo/foobaa")
h51s("example.h5")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created<- h5createFile("example.h5")
created
created<- h5createFile("example.h5")
created
created<- h5createGroup("example.h5","foo")
created<- h5createGroup("example.h5","baa")
created<- h5createGroup("example.h5","foo/foobaa")
h51s("example.h5")
library(h51s)
install.packages("h51s")
h5ls("example.h5")
A <- matrix(1:10,nr=5,nc=2)
h5write(A,"example.h5","foo/A")
B <- array(seq(.1,2.0,by=.1),dim=c(5,2,2))
attr(B,"scale") <- "liter"
B
h5write(B,"example.h5","foo/foobaa/B")
h5ls("example.h5")
df <- data.frame(1L:5L, seq(0,1,length.out = 5),c("ab","cde","fghi","a","a"), stringsAsFactors = FALSE)
h5write(df,"example.h5","df")
h5ls("example.h5")
readA <- h5read("example.h5","foo/A")
readB <- h5read("example.h5","foo/foobaa/B")
readf <- h5read("example.h5","df")
readA
h5write(c(12,13,14),"example.h5","foo/A",index<-list(1:3,1))
h5write(c(12,13,14),"example.h5","foo/A",index=list(1:3,1))
h5read("example.h5","foo/A")
con <- url("http://scholar.google.com/citations?user=HI-16C0AAAA7&h1=en")
htmlCode <- readLines(con)
close(con)
htmlCode
library(XML)
url
url<-"http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url,useInternalNodes = T)
xpathSApply(html,"//title",xmlValue)
xpathSApply(html,"//td[@id='col-citedby']",xmlValue)
xpathSApply(html,"//td[@id='col-citedby']",xmlValue)
xpathSApply(html,"//title",xmlValue)
xpathSApply(html,"//td[@id='col-citedby']",xmlValue)
library(httr)
html2<-GET(url)
content2 <- content(html2,as="text")
parsedHtml<- htmlParse(content2,asText=TRUE)
xpathSApply(parsedHtml,"//title",xmlValue)
pg1<- GET("http://httpbin.org/basic-auth/user/passwd")
pg1
pg2 <- GET('http://httpbin.org/basic-auth/user/passwd')
pg2 <- GET('http://httpbin.org/basic-auth/user/passwd',authenticate("user","passwd"))
pg2
google <- handle("http://google.com")
pg1 <- GET(handle <- google,path="/")
google <- handle("http://google.com")
pg1 <- GET(handle = google,path="/")
pg2 <- GET(handle = google,path="search")
pg1
pg2
myapp <- oauth_app("twitter",key="yourConsumerKeyHere",secret = "yourConsumerSecretHere")
sig <- sign_oauth1.0(myapp,token <- "yourTokenHere",token_secret = "yourTokenSecretHere")
homeTL<- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",sig)
con <- url("http://scholar.google.com/citations?user=HI-16C0AAAAJ&h1=en")
htmlCode <- readLines(con)
htmlCode
close(con)
htmlCode
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes = 1)
xpathApply(html,"//title",xmlValue)
xpathApply(html,"//td[@id='col-citedby']",xmlValue)
xpathApply(html,"//td",xmlValue)
library(httr)
url
library(httr); html2 = GET(url)
content2<- content(html2,as="text")
parsedHtml <- htmlParse(content2, asText = TRUE)
xpathSApply(parsedHtml,"//title",xmlValue)
pg1<- GET("http://httpbin.org/basic-auth/user/passwd")
pg1
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",)
myapp <- oauth_app("github",key ="a7e6963fad193aae48d7", secret = "7d849fbe7b68f0e4fceb9b3b6998a9ddd8a039c3")
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
myapp <- oauth_app("github",key ="a7e6963fad193aae48d7", secret = "7d849fbe7b68f0e4fceb9b3b6998a9ddd8a039c3")
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",key = "a7e6963fad193aae48d7", secret = "7d849fbe7b68f0e4fceb9b3b6998a9ddd8a039c3")
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit",gtoken)
stop_for_status(req)
content(req)
myapp <- oauth_app("twitter",key="RqR6ablottRaN2csMjxWOLPMP",secret <- "TNCA16VKNhscGKWdKSLlaJ1DsprKoj8ybVwqrSOML7rvZEQ5v")
oauth_app
library(oauth_app)
install.packages("oauth_app")
library(httr)
myapp <- oauth_app("twitter",key="RqR6ablottRaN2csMjxWOLPMP", secret = "iTNCA16VKNhscGKWdKSLlaJ1DsprKoj8ybVwqrSOML7rvZEQ5v")
sig <- sign_oauth1.0(myapp,token = "3423649217-1LIofOLYFfqoGuPZDMt6hzGh6tUUKYZNMbNXXxw", token_secret = "ZeBdhdHsHuhTZilNmwZDxUlNEUuCHFlXNTw4D1422xnmT")
homeTL <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",sig)
homeTL <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json",sig)
library(jsonlite)
json1<- content(homeTL)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",key = "a7e6963fad193aae48d7", secret = "7d849fbe7b68f0e4fceb9b3b6998a9ddd8a039c3")
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
library(httpuv)
install.packages("httpuv")
myapp <- oauth_app("github",key = "a7e6963fad193aae48d7", secret = "7d849fbe7b68f0e4fceb9b3b6998a9ddd8a039c3")
github_token<- oauth2.0_token(oauth_endpoints("github"),myapp)
myapp <- oauth_app("github",key = "a7e6963fad193aae48d7", secret = "7d849fbe7b68f0e4fceb9b3b6998a9ddd8a039c3")
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
myapp <- oauth_app("github",key = "a7e6963fad193aae48d7", secret = "7d849fbe7b68f0e4fceb9b3b6998a9ddd8a039c3")
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
gtoken <- oauth2.0_token(oauth_endpoints("github"),myapp)
req <- GET("https://api.github.com/rate_limit)",gtoken)
stop_for_status(req)
stop_for_status(req)
content(req)
oauth_endpoints("github")
myapp <- oauth_app("github",key = "a7e6963fad193aae48d7", secret = "7d849fbe7b68f0e4fceb9b3b6998a9ddd8a039c3")
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
gtoken <- config(ttoken = github_token)
req <- GET("https://api.github.com/rate_limit",gtoken)
req <- GET("https://api.github.com/rate_limit",gtoken)
req <- GET("https://api.github.com/rate_limit",gtoken)
stop_for_status(req)
content(req)
library(reshape2)
head(mtcars)
data<-mtcars
data$carname<-rownames(data)
View(data)
View(data)
dim(mtcars)
data_melt=melt(data,id=c("carname","cyl","gear"),measure.vars = c("hp","mpg"))
View(data_melt)
View(data_melt)
cylData<-dcast(data_melt,cyl-variable)
dcast(data_melt,cyl-variable)
dcast(data_melt,cyl~variable)
dcast(data_melt,cyl~variable,sum)
dcast(data_melt,cyl~variable,mean)
dir()
cd desktop
setwd("desktop")
setwd(../)
getwd()
getwd("../")
getwd(../)
getwd(..)
setwd("c:")
setwd("c:/users")
setwd("c:/users/desktop")
setwd("c:/users/atx/desktop")
setwd("c:/users/atx")
dir()
setwd("c:/users/atx/box sync")
dir()
setwd("c:/users/atx/box sync/box sync")
dir()
setwd("c:/users/atx/box sync/box sync/getting&cleaningData Coursera")
dir
dir()
setwd("c:/users/atx/box sync/box sync/getting&cleaningData Coursera/week1")
dir
dir()
fileUrl<- "htttps://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "./data/cameras.csv", method = "curl")
list.files("./data")
download.file(fileUrl, destfile = "cameras.csv", method = "curl")
fileUrl
download.file(fileUrl, destfile = "cameras.csv", method = "curl")
fileUrl<- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "cameras.csv", method = "curl")
fileUrl="https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "cameras.csv", method = "curl")
download.file(fileUrl, destfile = "cameras.csv", method = "curl")
download.file(fileUrl, destfile = "cameras.csv", method = "curl")
cameraData<- read.table("1.csv", sep = ",", header = TRUE)
cameraData.head()
head(cameraData)
fileUrl<- "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc<-htmlTreeParse(fileUrl, useInternal = TRUE)
import htmlTreeParse
dir()
getwd()
setwd("c:/users/atx")
setwd("c:/users/atx/desktop")
setwd("c:/users/atx/desktop/ml/dataanalysis")
dir
download.file(url = "http://bit.ly/dasi_project_template", destfile = "dasi_project_template.Rmd")
load(url("http://bit.ly/dasi_gss_data"))
View(cameraData)
delete(cameraData)
remove(cameraData)
head(gss)
names(gss)
table(gss$owngun)
getwd()
set.seed("c:/users/atx/desktop/ml/dataanalysis/week1")
setwd("c:/users/atx/desktop/ml/dataanalysis/week1")
source("http://www.openintro.org/stat/data/present.R")
names(presen)t
present
names(present)
dim(present)
present$girls
head(present)
colSums(present$girls)
sum(present$girls)
present$girls
present[girls]
plot(x= present$year, y=present$girls)
plot(x= present$year, y=present$girls, type = "l")
plot(x= present$year, y=present$girls+present$boys, type = "l")
plot(x= present$year, y=(present$girls+present$boys), type = "l")
plot(x= present$year, y=present$girls, type = "l")
plot(x= present$year, y=(present$girls+present$boys), type = "l")
apply(present, 2, max)
apply(present, 1, max)
apply(present, 2, max)
?apply
apply(present, (1,2), max)
apply(present, c(1,2), max)
apply(present$boys+present$girls, 2, max)
apply(present$boys, 2, max)
apply(present[,1:2], 2, max)
which(present=max(present$boys+present$girls))
which(present=max(present$boys))
which(present==max(present$boys))
which(present==max(present$boys+present$girls))
present[85,:]
present[85,]
which(present==max(present$boys))
which(present$boys==max(present$boys))
temp=present$boys+present$girls
which(temp==max(temp))
present[22,]
present[22,]$year
tempColumn=present$boys+present$girls
present[which(tempColumn==max(tempColumn)),]$year
plot(present$year, present$boys/(present$boys+present$girls), type = "l")
present$boys > present$girls
plot(present$year, present$boys/(present$girls), type = "l")
absolue(-2)
abs(-1)
tempColumn=abs(present$boys-present$girls)
present[which(tempColumn==max(tempColumn)),]$year
rm(gss,present)
rm(temp,tempColumn)
rm(fileUrl)
source("http://www.openintro.org/stat/data/cdc.R")
names(cdc)
dim(cdc)
head(cdc$genhlth)
head(cdc$exerany)
levels(cdc$genhlth)
head(cdc$weight)
levels(cdc$weight)
head(cdc$smoke100)
levels(cdc$smoke100)
summary(cdc$weight)
mean(cdc$weight)
var(cdc$weight)
median(cdc$weight)
table(cdc$smoke100)
table(cdc$smoke100)/20000
barplot(table(cdc$smoke100))
summary(cdc$gender)
levels(cdc$genhlth)
table(cdc$genhlth)
table(cdc$genhlth)/20000
table(cdc$gender,cdc$smoke100)
gender_smokers=table(cdc$gender,cdc$smoke100)
mosaicplot(gender_smokers)
1:10
cdc[,6]
cdc$weight[576]
cdc$gender == 'm'
cdc$age>30
mdata=ssubset(cdc,cdc$gender=='m')
mdata=subset(cdc,cdc$gender=='m')
head(mdata)
m_and_over30 = subset(cdc,cdc$gender=='m' & cdc$age>30)
head(cdc$smoke100)
subset(cdc, cdc$age<30)
under23_and_smoke=subset(cdc, cdc$age<30)
dim(under23_and_smoke)
under23_and_smoke=subset(cdc, cdc$age<30 & cdc$smoke100 == 1)
dim(under23_and_smoke)
under23_and_smoke=subset(cdc, cdc$age<23 & cdc$smoke100 == 1)
dim(under23_and_smoke)
boxplot(cdc$height)
summary(cdc$height)
boxplot(cdc$height ~ cdc$gender)
bmi = (cdc$weight / cdc$height^2) * 703
boxplot(bmi ~ cdc$genhlth)
hist(bmi[cdc$genhlth=='excellent'])
hist(bmi[cdc$genhlth=='poor'])
hist(cdc$age)
hist(bmi)
hist(bmi, breaks =5-)
hist(bmi, breaks =50)
plot(cdc$weight,cdc$wtdesire)
plot(cdc$weight,cdc$wtdesire, type='l')
plot(cdc$weight,cdc$wtdesire)
