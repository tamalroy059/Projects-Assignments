package week2

object rationals {
  val x = new Rational(1,3)                       //> x  : week2.Rational = 1/3
  x.numer                                         //> res0: Int = 1
  x.denom                                         //> res1: Int = 3
  
  val y = new Rational(5,7)                       //> y  : week2.Rational = 5/7
  x.add(y).toString                               //> res2: String = 22/21
  
  val z = new Rational(3,2)                       //> z  : week2.Rational = 3/2
  
  x.sub(y).sub(z)                                 //> res3: week2.Rational = -79/42
  y.add(y)                                        //> res4: week2.Rational = 10/7
  x.less(y)                                       //> res5: Boolean = true
  x.max(y)                                        //> res6: week2.Rational = 5/7
  
  val strange = new Rational(1,1)                 //> java.lang.IllegalArgumentException: requirement failed: denominator must be 
                                                  //| non zero
                                                  //| 	at scala.Predef$.require(Predef.scala:277)
                                                  //| 	at week2.Rational.<init>(week2.rationals.scala:30)
                                                  //| 	at week2.rationals$.$anonfun$main$1(week2.rationals.scala:18)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$.$anonfun$$ex
                                                  //| ecute$1(WorksheetSupport.scala:76)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$.redirected(W
                                                  //| orksheetSupport.scala:65)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$.$execute(Wor
                                                  //| ksheetSupport.scala:76)
                                                  //| 	at week2.rationals$.main(week2.rationals.scala:3)
                                                  //| 	at week2.rationals.main(week2.rationals.scala)
  x.add(strange)
  
  
  	new Rational(1,2).numer
  
  
}



class Rational(x: Int, y:Int) {
	require(y !=0, "denominator must be non zero")
	
	def this(x:Int) = this(x,1)
	private def gcd(a:Int, b:Int): Int = if (b==0) a else gcd(b,a%b)
	private val g = gcd(x,y)
	
	def numer=x/g
	def denom =y/g
	
	def less(that:Rational) = this.numer*that.denom < that.numer*this.denom
	
	def max(that: Rational) = if (this.less(that)) that else this
	def add(that: Rational): Rational =




	new Rational(
		numer * that.denom + that.numer * denom,
		denom * that.denom
	)
	
	def neg: Rational = new Rational(-numer, denom)
	
	def sub(that:Rational) = add(that.neg)
	
	override def toString =
		numer + "/" + denom
		
}